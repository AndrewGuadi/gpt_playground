✅ Project Outline: Mobile Sensor Dashboard SPA
📌 Goal
Create a single-page application that:

Uses only index.html, styles.css, and script.js

Displays live readings from:

Accelerometer

LinearAccelerationSensor

Gyroscope

Magnetometer

AbsoluteOrientationSensor

RelativeOrientationSensor

Updates values in real-time

Shows sensor status (working / error / unsupported)

Runs entirely in the browser, no external libraries

Requires HTTPS for real sensor access

📂 Project Structure
bash
Copy
Edit
/sensor-dashboard/
 ├─ index.html
 ├─ styles.css
 └─ script.js
📄 index.html
Basic HTML5 structure.

<head> includes:

<title> — “Sensor Dashboard”

<link> to styles.css

<body> includes:

<h1> — page title.

Short instruction: “Tap to allow sensors, must be HTTPS.”

One <div> block per sensor, each containing:

<h2> sensor name

<p> tags for live X, Y, Z or quaternion values

<p class="status"> to show errors or status

<script> tag at end for script.js.

🎨 styles.css
Simple readable styling:

Body padding and neutral background

h1 centered

.sensor blocks with borders, spacing, subtle shadow

<p> tags with clean spacing

Responsive: stack vertically, readable on mobile

🧩 script.js
Responsibilities:

Create setupSensor helper function

Takes:

Sensor constructor (Accelerometer, Gyroscope, etc.)

ID of the container div

Callback to handle data

For each sensor:

Call setupSensor with:

Sensor name

Handler that reads x,y,z or quaternion

Updates text in <span>s inside the container

Handle errors:

If sensor not supported, show Not supported.

If permission blocked, show Permission denied.

If working, show live values.

Frequency:

Use {frequency: 10} or {frequency: 30} for smooth updates.

🔒 Requirements
Must run on https:// or localhost — many sensor APIs don’t work on HTTP.

Works best on modern mobile browsers.

Some sensors may require user gesture (tap).

✅ Extra (optional)
Add timestamp or update rate.

Color code status (green for working, red for error).

Simple auto-refresh if a sensor stops.

Fallback message for unsupported devices.

⚡ Deliverable
A lightweight, zero-dependency local test app to:

Inspect what sensors your device/browser exposes.

See raw values live.

Help debug motion/orientation access issues.

